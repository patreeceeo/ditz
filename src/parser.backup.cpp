/* A recursive-descent parser generated by peg 0.1.2 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define YYRULECOUNT 14

  #include "repl.hpp"

  #define YYSTYPE Tn8 *
  
  #define DUP \
    yy = strdup(yytext)
  
  #define DEFER(S, ...) \
    sprintf(buf, S "\n", __VA_ARGS__); strcat(defer, buf);
  
  #define YY_INPUT(buf, result, max_size) { \
      int yyc = REPL::getNextChar(); \
      result = (EOF == yyc) ? 0 : (*(buf)= yyc, 1); \
      }
      
namespace REPL
  {
  Tn8 name[80];
  Tn8 layerName[80];
  Tn8 tableName[80];
  Tn8 tableColName[80];
  Tn8 strValue[80];

  Ts32 intValue;
  size_t index;


#ifndef YY_VARIABLE
#define YY_VARIABLE(T)	static T
#endif
#ifndef YY_LOCAL
#define YY_LOCAL(T)	static T
#endif
#ifndef YY_ACTION
#define YY_ACTION(T)	static T
#endif
#ifndef YY_RULE
#define YY_RULE(T)	static T
#endif
#ifndef YY_PARSE
#define YY_PARSE(T)	T
#endif
#ifndef YYPARSE
#define YYPARSE		yyparse
#endif
#ifndef YYPARSEFROM
#define YYPARSEFROM	yyparsefrom
#endif
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)			\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#ifndef YY_BEGIN
#define YY_BEGIN	( yybegin= yypos, 1)
#endif
#ifndef YY_END
#define YY_END		( yyend= yypos, 1)
#endif
#ifdef YY_DEBUG
# define yyprintf(args)	fprintf args
#else
# define yyprintf(args)
#endif
#ifndef YYSTYPE
#define YYSTYPE	int
#endif

#ifndef YY_PART

typedef void (*yyaction)(char *yytext, int yyleng);
typedef struct _yythunk { int begin, end;  yyaction  action;  struct _yythunk *next; } yythunk;

YY_VARIABLE(char *   ) yybuf= 0;
YY_VARIABLE(int	     ) yybuflen= 0;
YY_VARIABLE(int	     ) yypos= 0;
YY_VARIABLE(int	     ) yylimit= 0;
YY_VARIABLE(char *   ) yytext= 0;
YY_VARIABLE(int	     ) yytextlen= 0;
YY_VARIABLE(int	     ) yybegin= 0;
YY_VARIABLE(int	     ) yyend= 0;
YY_VARIABLE(int	     ) yytextmax= 0;
YY_VARIABLE(yythunk *) yythunks= 0;
YY_VARIABLE(int	     ) yythunkslen= 0;
YY_VARIABLE(int      ) yythunkpos= 0;
YY_VARIABLE(YYSTYPE  ) yy;
YY_VARIABLE(YYSTYPE *) yyval= 0;
YY_VARIABLE(YYSTYPE *) yyvals= 0;
YY_VARIABLE(int      ) yyvalslen= 0;

YY_LOCAL(int) yyrefill(void)
{
  int yyn;
  while (yybuflen - yypos < 512)
    {
      yybuflen *= 2;
      yybuf= realloc(yybuf, yybuflen);
    }
  YY_INPUT((yybuf + yypos), yyn, (yybuflen - yypos));
  if (!yyn) return 0;
  yylimit += yyn;
  return 1;
}

YY_LOCAL(int) yymatchDot(void)
{
  if (yypos >= yylimit && !yyrefill()) return 0;
  ++yypos;
  return 1;
}

YY_LOCAL(int) yymatchChar(int c)
{
  if (yypos >= yylimit && !yyrefill()) return 0;
  if (yybuf[yypos] == c)
    {
      ++yypos;
      yyprintf((stderr, "  ok   yymatchChar(%c) @ %s\n", c, yybuf+yypos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchChar(%c) @ %s\n", c, yybuf+yypos));
  return 0;
}

YY_LOCAL(int) yymatchString(char *s)
{
  int yysav= yypos;
  while (*s)
    {
      if (yypos >= yylimit && !yyrefill()) return 0;
      if (yybuf[yypos] != *s)
        {
          yypos= yysav;
          return 0;
        }
      ++s;
      ++yypos;
    }
  return 1;
}

YY_LOCAL(int) yymatchClass(unsigned char *bits)
{
  int c;
  if (yypos >= yylimit && !yyrefill()) return 0;
  c= yybuf[yypos];
  if (bits[c >> 3] & (1 << (c & 7)))
    {
      ++yypos;
      yyprintf((stderr, "  ok   yymatchClass @ %s\n", yybuf+yypos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchClass @ %s\n", yybuf+yypos));
  return 0;
}

YY_LOCAL(void) yyDo(yyaction action, int begin, int end)
{
  while (yythunkpos >= yythunkslen)
    {
      yythunkslen *= 2;
      yythunks= realloc(yythunks, sizeof(yythunk) * yythunkslen);
    }
  yythunks[yythunkpos].begin=  begin;
  yythunks[yythunkpos].end=    end;
  yythunks[yythunkpos].action= action;
  ++yythunkpos;
}

YY_LOCAL(int) yyText(int begin, int end)
{
  int yyleng= end - begin;
  if (yyleng <= 0)
    yyleng= 0;
  else
    {
      while (yytextlen < (yyleng - 1))
	{
	  yytextlen *= 2;
	  yytext= realloc(yytext, yytextlen);
	}
      memcpy(yytext, yybuf + begin, yyleng);
    }
  yytext[yyleng]= '\0';
  return yyleng;
}

YY_LOCAL(void) yyDone(void)
{
  int pos;
  for (pos= 0;  pos < yythunkpos;  ++pos)
    {
      yythunk *thunk= &yythunks[pos];
      int yyleng= thunk->end ? yyText(thunk->begin, thunk->end) : thunk->begin;
      yyprintf((stderr, "DO [%d] %p %s\n", pos, thunk->action, yytext));
      thunk->action(yytext, yyleng);
    }
  yythunkpos= 0;
}

YY_LOCAL(void) yyCommit()
{
  if ((yylimit -= yypos))
    {
      memmove(yybuf, yybuf + yypos, yylimit);
    }
  yybegin -= yypos;
  yyend -= yypos;
  yypos= yythunkpos= 0;
}

YY_LOCAL(int) yyAccept(int tp0)
{
  if (tp0)
    {
      fprintf(stderr, "accept denied at %d\n", tp0);
      return 0;
    }
  else
    {
      yyDone();
      yyCommit();
    }
  return 1;
}

YY_LOCAL(void) yyPush(char *text, int count)	{ yyval += count; }
YY_LOCAL(void) yyPop(char *text, int count)	{ yyval -= count; }
YY_LOCAL(void) yySet(char *text, int count)	{ yyval[count]= yy; }

#endif /* YY_PART */

#define	YYACCEPT	yyAccept(yythunkpos0)

YY_RULE(int) yy_index(); /* 14 */
YY_RULE(int) yy_string(); /* 13 */
YY_RULE(int) yy_var_stmt(); /* 12 */
YY_RULE(int) yy_str_value(); /* 11 */
YY_RULE(int) yy_int_value(); /* 10 */
YY_RULE(int) yy_rec_spec(); /* 9 */
YY_RULE(int) yy_col_spec(); /* 8 */
YY_RULE(int) yy_row_spec(); /* 7 */
YY_RULE(int) yy_name(); /* 6 */
YY_RULE(int) yy_layer_name(); /* 5 */
YY_RULE(int) yy_stmt(); /* 4 */
YY_RULE(int) yy_meta_stmt(); /* 3 */
YY_RULE(int) yy_ui_stmt(); /* 2 */
YY_RULE(int) yy_top_stmt(); /* 1 */

YY_ACTION(void) yy_3_index(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_3_index\n"));
   index = computeIndex (); ;
}
YY_ACTION(void) yy_2_index(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_2_index\n"));
   addToIndex (name, intValue); ;
}
YY_ACTION(void) yy_1_index(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_1_index\n"));
   index = strtol (yytext); ;
}
YY_ACTION(void) yy_1_string(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_1_string\n"));
   strcpy (strValue, yytext); ;
}
YY_ACTION(void) yy_1_name(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_1_name\n"));
   intValue = strtol (yytext); ;
}
YY_ACTION(void) yy_3_var_stmt(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_3_var_stmt\n"));
   doGetRec (tableColName, index); ;
}
YY_ACTION(void) yy_2_var_stmt(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_2_var_stmt\n"));
   doSetRec (tableColName, index, strValue); ;
}
YY_ACTION(void) yy_1_var_stmt(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_1_var_stmt\n"));
   doSetRec (tableColName, index, intValue); ;
}
YY_ACTION(void) yy_8_stmt(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_8_stmt\n"));
   doDeleteRec (tableColName, index); ;
}
YY_ACTION(void) yy_7_stmt(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_7_stmt\n"));
   doSetRec (tableColName, index, strValue); ;
}
YY_ACTION(void) yy_6_stmt(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_6_stmt\n"));
   doSetRec (tableColName, index, intValue); ;
}
YY_ACTION(void) yy_5_stmt(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_5_stmt\n"));
   doGetRec (tableColName, index); ;
}
YY_ACTION(void) yy_4_stmt(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_4_stmt\n"));
   doHasRec (tableColName, index); ;
}
YY_ACTION(void) yy_3_stmt(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_3_stmt\n"));
   doHasCol (tableColName); ;
}
YY_ACTION(void) yy_2_stmt(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_2_stmt\n"));
   doHasRow (tableName, index); ;
}
YY_ACTION(void) yy_1_stmt(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_1_stmt\n"));
   doPrint (name); ;
}
YY_ACTION(void) yy_1_meta_stmt(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_1_meta_stmt\n"));
   doDescribe (name); ;
}
YY_ACTION(void) yy_2_ui_stmt(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_2_ui_stmt\n"));
   setLayer (layerName); ;
}
YY_ACTION(void) yy_1_ui_stmt(char *yytext, int yyleng)
{
  yyprintf((stderr, "do yy_1_ui_stmt\n"));
   doHelp (); ;
}

YY_RULE(int) yy_index()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "index"));
  {  int yypos2= yypos, yythunkpos2= yythunkpos;  if (!yy_int_value()) goto l3;  yyDo(yy_1_index, yybegin, yyend);  goto l2;
  l3:;	  yypos= yypos2; yythunkpos= yythunkpos2;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l1;  if (!yymatchChar('{')) goto l1;  yyText(yybegin, yyend);  if (!(YY_END)) goto l1;  if (!yy_name()) goto l1;  if (!yy_int_value()) goto l1;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l1;  if (!yymatchChar(',')) goto l1;  yyText(yybegin, yyend);  if (!(YY_END)) goto l1;  yyDo(yy_2_index, yybegin, yyend);
  l4:;	
  {  int yypos5= yypos, yythunkpos5= yythunkpos;  if (!yy_name()) goto l5;  if (!yy_int_value()) goto l5;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l5;  if (!yymatchChar(',')) goto l5;  yyText(yybegin, yyend);  if (!(YY_END)) goto l5;  yyDo(yy_2_index, yybegin, yyend);  goto l4;
  l5:;	  yypos= yypos5; yythunkpos= yythunkpos5;
  }  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l1;  if (!yymatchChar('}')) goto l1;  yyText(yybegin, yyend);  if (!(YY_END)) goto l1;  yyDo(yy_3_index, yybegin, yyend);
  }
  l2:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "index", yybuf+yypos));
  return 1;
  l1:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "index", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_string()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "string"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l6;
  {  int yypos7= yypos, yythunkpos7= yythunkpos;
  l8:;	
  {  int yypos9= yypos, yythunkpos9= yythunkpos;  if (!yymatchClass((unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l9;  goto l8;
  l9:;	  yypos= yypos9; yythunkpos= yythunkpos9;
  }  goto l6;
  l7:;	  yypos= yypos7; yythunkpos= yythunkpos7;
  }  yyText(yybegin, yyend);  if (!(YY_END)) goto l6;  yyDo(yy_1_string, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "string", yybuf+yypos));
  return 1;
  l6:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "string", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_var_stmt()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "var_stmt"));
  {  int yypos11= yypos, yythunkpos11= yythunkpos;  if (!yy_rec_spec()) goto l12;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l12;  if (!yymatchChar('=')) goto l12;  yyText(yybegin, yyend);  if (!(YY_END)) goto l12;  if (!yy_int_value()) goto l12;  yyDo(yy_1_var_stmt, yybegin, yyend);  goto l11;
  l12:;	  yypos= yypos11; yythunkpos= yythunkpos11;  if (!yy_rec_spec()) goto l13;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l13;  if (!yymatchChar('=')) goto l13;  yyText(yybegin, yyend);  if (!(YY_END)) goto l13;  if (!yy_str_value()) goto l13;  yyDo(yy_2_var_stmt, yybegin, yyend);  goto l11;
  l13:;	  yypos= yypos11; yythunkpos= yythunkpos11;  if (!yy_rec_spec()) goto l10;  yyDo(yy_3_var_stmt, yybegin, yyend);
  }
  l11:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "var_stmt", yybuf+yypos));
  return 1;
  l10:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "var_stmt", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_str_value()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "str_value"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l14;  if (!yymatchClass((unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l14;  yyText(yybegin, yyend);  if (!(YY_END)) goto l14;  if (!yy_string()) goto l14;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l14;  if (!yymatchClass((unsigned char *)"\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l14;  yyText(yybegin, yyend);  if (!(YY_END)) goto l14;
  yyprintf((stderr, "  ok   %s @ %s\n", "str_value", yybuf+yypos));
  return 1;
  l14:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "str_value", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_name()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "name"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l15;  if (!yymatchClass((unsigned char *)"\000\004\000\000\201\033\377\177\376\377\377\217\376\377\377\057\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l15;
  l16:;	
  {  int yypos17= yypos, yythunkpos17= yythunkpos;  if (!yymatchClass((unsigned char *)"\000\004\000\000\201\033\377\177\376\377\377\217\376\377\377\057\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l17;  goto l16;
  l17:;	  yypos= yypos17; yythunkpos= yythunkpos17;
  }  yyText(yybegin, yyend);  if (!(YY_END)) goto l15;  yyDo(yy_1_name, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "name", yybuf+yypos));
  return 1;
  l15:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "name", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_stmt()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "stmt"));
  {  int yypos19= yypos, yythunkpos19= yythunkpos;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l20;  if (!yymatchString("print")) goto l20;  yyText(yybegin, yyend);  if (!(YY_END)) goto l20;  if (!yy_name()) goto l20;  yyDo(yy_1_stmt, yybegin, yyend);  goto l19;
  l20:;	  yypos= yypos19; yythunkpos= yythunkpos19;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l21;  if (!yymatchString("has")) goto l21;  yyText(yybegin, yyend);  if (!(YY_END)) goto l21;  if (!yy_row_spec()) goto l21;  yyDo(yy_2_stmt, yybegin, yyend);  goto l19;
  l21:;	  yypos= yypos19; yythunkpos= yythunkpos19;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l22;  if (!yymatchString("has")) goto l22;  yyText(yybegin, yyend);  if (!(YY_END)) goto l22;  if (!yy_col_spec()) goto l22;  yyDo(yy_3_stmt, yybegin, yyend);  goto l19;
  l22:;	  yypos= yypos19; yythunkpos= yythunkpos19;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l23;  if (!yymatchString("has")) goto l23;  yyText(yybegin, yyend);  if (!(YY_END)) goto l23;  if (!yy_rec_spec()) goto l23;  yyDo(yy_4_stmt, yybegin, yyend);  goto l19;
  l23:;	  yypos= yypos19; yythunkpos= yythunkpos19;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l24;  if (!yymatchString("get")) goto l24;  yyText(yybegin, yyend);  if (!(YY_END)) goto l24;  if (!yy_rec_spec()) goto l24;  yyDo(yy_5_stmt, yybegin, yyend);  goto l19;
  l24:;	  yypos= yypos19; yythunkpos= yythunkpos19;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l25;  if (!yymatchString("set")) goto l25;  yyText(yybegin, yyend);  if (!(YY_END)) goto l25;  if (!yy_rec_spec()) goto l25;  if (!yy_int_value()) goto l25;  yyDo(yy_6_stmt, yybegin, yyend);  goto l19;
  l25:;	  yypos= yypos19; yythunkpos= yythunkpos19;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l26;  if (!yymatchString("set")) goto l26;  yyText(yybegin, yyend);  if (!(YY_END)) goto l26;  if (!yy_rec_spec()) goto l26;  if (!yy_str_value()) goto l26;  yyDo(yy_7_stmt, yybegin, yyend);  goto l19;
  l26:;	  yypos= yypos19; yythunkpos= yythunkpos19;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l27;  if (!yymatchString("delete")) goto l27;  yyText(yybegin, yyend);  if (!(YY_END)) goto l27;  if (!yy_rec_spec()) goto l27;  yyDo(yy_8_stmt, yybegin, yyend);  goto l19;
  l27:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yy_var_stmt()) goto l18;
  }
  l19:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "stmt", yybuf+yypos));
  return 1;
  l18:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "stmt", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_meta_stmt()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "meta_stmt"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l28;  if (!yymatchString("describe")) goto l28;  if (!yy_name()) goto l28;  yyText(yybegin, yyend);  if (!(YY_END)) goto l28;  yyDo(yy_1_meta_stmt, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "meta_stmt", yybuf+yypos));
  return 1;
  l28:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "meta_stmt", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_ui_stmt()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "ui_stmt"));
  {  int yypos30= yypos, yythunkpos30= yythunkpos;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l31;  if (!yymatchString("help")) goto l31;  yyText(yybegin, yyend);  if (!(YY_END)) goto l31;  yyDo(yy_1_ui_stmt, yybegin, yyend);  goto l30;
  l31:;	  yypos= yypos30; yythunkpos= yythunkpos30;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l29;  if (!yymatchString("layer")) goto l29;  if (!yy_layer_name()) goto l29;  yyText(yybegin, yyend);  if (!(YY_END)) goto l29;  yyDo(yy_2_ui_stmt, yybegin, yyend);
  }
  l30:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "ui_stmt", yybuf+yypos));
  return 1;
  l29:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ui_stmt", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_top_stmt()
{
  yyprintf((stderr, "%s\n", "top_stmt"));
  l33:;	
  {  int yypos34= yypos, yythunkpos34= yythunkpos;
  {  int yypos35= yypos, yythunkpos35= yythunkpos;  if (!yy_ui_stmt()) goto l36;  goto l35;
  l36:;	  yypos= yypos35; yythunkpos= yythunkpos35;  if (!yy_meta_stmt()) goto l37;  goto l35;
  l37:;	  yypos= yypos35; yythunkpos= yythunkpos35;  if (!yy_stmt()) goto l34;
  }
  l35:;	  goto l33;
  l34:;	  yypos= yypos34; yythunkpos= yythunkpos34;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "top_stmt", yybuf+yypos));
  return 1;
}

#ifndef YY_PART

typedef int (*yyrule)();

YY_PARSE(int) YYPARSEFROM(yyrule yystart)
{
  int yyok;
  if (!yybuflen)
    {
      yybuflen= 1024;
      yybuf= malloc(yybuflen);
      yytextlen= 1024;
      yytext= malloc(yytextlen);
      yythunkslen= 32;
      yythunks= malloc(sizeof(yythunk) * yythunkslen);
      yyvalslen= 32;
      yyvals= malloc(sizeof(YYSTYPE) * yyvalslen);
      yybegin= yyend= yypos= yylimit= yythunkpos= 0;
    }
  yybegin= yyend= yypos;
  yythunkpos= 0;
  yyval= yyvals;
  yyok= yystart();
  if (yyok) yyDone();
  yyCommit();
  return yyok;
  (void)yyrefill;
  (void)yymatchDot;
  (void)yymatchChar;
  (void)yymatchString;
  (void)yymatchClass;
  (void)yyDo;
  (void)yyText;
  (void)yyDone;
  (void)yyCommit;
  (void)yyAccept;
  (void)yyPush;
  (void)yyPop;
  (void)yySet;
  (void)yytextmax;
}

YY_PARSE(int) YYPARSE(void)
{
  return YYPARSEFROM(yy_top_stmt);
}

#endif

   }

Tn8 lineBuf[256];

  int 
main(int argc, char **argv) 
  {
  REPL::initialize();
  if (argc > 1)
    REPL::doHelp();
  else 
    {
    REPL::setInput(lineBuf);
    while(fgets(lineBuf, sizeof(lineBuf), stdin) && YYPARSE());
    if(!REPL::itsQuittingTime())
      while(REPL::doPrompt(lineBuf, sizeof(lineBuf)) && YYPARSE());  
    }
  REPL::doQuit();
  return 0;
  }

